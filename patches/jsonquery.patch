diff --git a/node.go b/node.go
index 4b28b32..afeed80 100644
--- a/node.go
+++ b/node.go
@@ -8,6 +8,7 @@ import (
 	"net/http"
 	"sort"
 	"strconv"
+	"strings"
 )
 
 // A NodeType is the type of a Node.
@@ -143,6 +144,29 @@ func parseValue(x interface{}, top *Node, level int) {
 			addNode(n)
 			parseValue(vv, n, level+1)
 		}
+	case map[string]string:
+		var keys []string
+		for key := range v {
+			keys = append(keys, key)
+		}
+		sort.Strings(keys)
+		for _, key := range keys {
+			tmpKey := key
+			var tmpVal interface{}
+			tmpVal = v[key]
+			if (strings.HasSuffix(key, "@")) {
+				tmpKey = key[:len(key) - 1]
+				tmpValArr := []interface{}{}
+				for _, val := range strings.Split(v[key], ",") {
+					tmpValArr = append(tmpValArr, val)
+				}
+				tmpVal = tmpValArr
+			}
+
+			n := &Node{Data: tmpKey, Type: ElementNode, level: level}
+			addNode(n)
+			parseValue(tmpVal, n, level+1)
+		}
 	case map[string]interface{}:
 		// The Goâ€™s map iteration order is random.
 		// (https://blog.golang.org/go-maps-in-action#Iteration-order)
@@ -152,9 +176,21 @@ func parseValue(x interface{}, top *Node, level int) {
 		}
 		sort.Strings(keys)
 		for _, key := range keys {
-			n := &Node{Data: key, Type: ElementNode, level: level}
+			tmpKey := key
+			var tmpVal interface{}
+			tmpVal = v[key]
+			if (strings.HasSuffix(key, "@")) {
+				tmpKey = key[:len(key) - 1]
+				tmpValArr := []interface{}{}
+				for _, val := range strings.Split(v[key].(string), ",") {
+					tmpValArr = append(tmpValArr, val)
+				}
+				tmpVal = tmpValArr
+			}
+
+			n := &Node{Data: tmpKey, Type: ElementNode, level: level}
 			addNode(n)
-			parseValue(v[key], n, level+1)
+			parseValue(tmpVal, n, level+1)
 		}
 	case string:
 		n := &Node{Data: v, Type: TextNode, level: level}
@@ -188,3 +224,9 @@ func Parse(r io.Reader) (*Node, error) {
 	}
 	return parse(b)
 }
+
+func ParseJsonMap(jsonMap *map[string]interface{}) (*Node, error) {
+	doc := &Node{Type: DocumentNode}
+	parseValue(*jsonMap, doc, 1)
+	return doc, nil
+}
diff --git a/query.go b/query.go
index 6421801..e3df27a 100644
--- a/query.go
+++ b/query.go
@@ -120,6 +120,14 @@ func (a *NodeNavigator) MoveToRoot() {
 	a.cur = a.root
 }
 
+func (a *NodeNavigator) MoveToContext() {
+	return
+}
+
+func (a *NodeNavigator) CurrentPrefix() string {
+	return ""
+}
+
 func (a *NodeNavigator) MoveToParent() bool {
 	if n := a.cur.Parent; n != nil {
 		a.cur = n
