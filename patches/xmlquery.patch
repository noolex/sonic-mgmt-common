diff --git a/node.go b/node.go
index e053748..1c9a529 100644
--- a/node.go
+++ b/node.go
@@ -45,7 +45,7 @@ type Node struct {
 
 // InnerText returns the text between the start and end tags of the object.
 func (n *Node) InnerText() string {
-	var output func(*bytes.Buffer, *Node)
+	/*var output func(*bytes.Buffer, *Node)
 	output = func(buf *bytes.Buffer, n *Node) {
 		switch n.Type {
 		case TextNode, CharDataNode:
@@ -60,7 +60,18 @@ func (n *Node) InnerText() string {
 
 	var buf bytes.Buffer
 	output(&buf, n)
-	return buf.String()
+	return buf.String()*/
+
+	if (n.Type == TextNode) {
+		return n.Data
+	} else if (n.Type == ElementNode) &&
+	(n.FirstChild != nil) &&
+	(n.FirstChild.Type == TextNode) {
+		return n.FirstChild.Data
+	}
+
+
+	return ""
 }
 
 func (n *Node) sanitizedData(preserveSpaces bool) string {
diff --git a/query.go b/query.go
index c148e5f..4ac76af 100644
--- a/query.go
+++ b/query.go
@@ -49,6 +49,29 @@ func CreateXPathNavigator(top *Node) *NodeNavigator {
 	return &NodeNavigator{curr: top, root: top, attr: -1}
 }
 
+//Evaluate XPath expression, the expression should evaluate to true or false
+func Eval(top, ctx *Node, exp *xpath.Expr) bool {
+	if exp == nil {
+		return false
+	}
+
+	v := exp.Evaluate(&NodeNavigator{curr: ctx, ctxt: ctx, root: top, attr: -1})
+
+	switch val := v.(type) {
+	case bool:
+		return val
+	case string:
+		return (val != "")
+	case float64:
+		return (val != 0)
+	case *xpath.NodeIterator:
+		return (val != nil)
+	}
+
+	//return v.(bool)
+	return false
+}
+
 func getCurrentNode(it *xpath.NodeIterator) *Node {
 	n := it.Current().(*NodeNavigator)
 	if n.NodeType() == xpath.AttributeNode {
@@ -146,7 +169,7 @@ func FindEachWithBreak(top *Node, expr string, cb func(int, *Node) bool) {
 }
 
 type NodeNavigator struct {
-	root, curr *Node
+	root, curr, ctxt *Node
 	attr       int
 }
 
@@ -217,6 +240,17 @@ func (x *NodeNavigator) MoveToRoot() {
 	x.curr = x.root
 }
 
+func (x *NodeNavigator) MoveToContext() {
+	x.curr = x.ctxt
+}
+
+func (x *NodeNavigator) CurrentPrefix() string {
+	if (x.ctxt != nil) {
+		return x.ctxt.Prefix
+	}
+	return ""
+}
+
 func (x *NodeNavigator) MoveToParent() bool {
 	if x.attr != -1 {
 		x.attr = -1
